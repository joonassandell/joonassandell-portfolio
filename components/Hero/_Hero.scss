/**
 * 1. For locomotive-scroll to work properly and not trigger a movement e.g.
 *    with heading after template transition
 */
.Hero {
  height: clamp(var(--Hero-minHeight), var(--Hero-height), var(--Hero-maxHeight));
  position: relative;

  &.-transition\:pre {
    @for $i from 0 through 10 {
      &:nth-child(#{$i}) {
        z-index: #{11 - $i};
      }
    }

    background-color: var(--cream-50);
    box-shadow: 0 var(--border-width) 0 var(--border-1000);
  }

  @include mq(s) {
    --Hero-maxHeight: #{rem($space * 48)};
  }

  @include mq(l) {
    --Hero-minHeight: #{rem($space * 42)};
    --Hero-height: var(--vh); // [1.]
  }

  @include mq(xxl) {
    --Hero-minHeight: #{rem($space * 44)};
  }
}

.Hero-inner {
  min-height: var(--vh); // [1.]
  pointer-events: none;

  > * {
    inset: 0;
    pointer-events: none;
    position: absolute;
  }

  > :where(.wrap) {
    @include mq($until: l) {
      padding-right: 0;
    }
  }
}

.Hero-heading {
  overflow: hidden;
  z-index: 2;
}

.Hero-heading-inner {
  align-items: center;
  bottom: rem($space-xl);
  display: flex;
  height: 25%;
  margin: 0 0 0 rem(-$space-xs);
  pointer-events: all;
  position: absolute;
  transform: translate3d(0, -150%, 0);
  white-space: nowrap;

  .Hero.-transition\:pre & {
    cursor: pointer;
    transform: translate3d(0, 0, 0);
  }

  @include mq(m) {
    margin-left: rem(-$space-m);
  }

  @include mq(l) {
    bottom: rem(-($space-ml + 1px));
  }

  @include mq(xl) {
    bottom: rem(-($space-m) + 1px);
  }
}

.Hero-figure {
  position: relative;
}

.Hero-link {
  inset: auto 0 rem($space-m + 2px) 0;
  padding-right: var(--wrap-spaceRight);
  pointer-events: all;
  position: absolute;
  z-index: 4;

  > .grid {
    place-items: end;
  }

  @include mq(l) {
    display: none;
  }
}

.Hero-content {
  pointer-events: all;
  position: relative;
  z-index: 4;

  @include mq($until: l) {
    display: none;
  }
}

.Hero-content-heading {
  margin-bottom: rem($space-xs);
}

.Hero-content-text {
  margin-bottom: rem($space-m);

  @include mq($until: l) {
    display: none;
  }
}

.Hero-figureBg {
  background: var(--Hero-figure-bg);
  height: 100%;
  opacity: var(--Hero-figure-pre-bg-alpha);
  width: 100%;
  z-index: 1;
}

.Hero-figureBg--animate {
  background: linear-gradient(180deg, var(--Hero-figure-bg) 0%, rgba(var(--Hero-figure-bg-rgb), 0) 100%);
  opacity: var(--Hero-figure-bg-alpha);
  position: relative;
  transform: scaleY(4);

  .Hero.-transition\:pre & {
    background: var(--Hero-figure-bg);
    opacity: var(--Hero-figure-pre-bg-alpha);
    transform: scaleY(1);
  }
}

.Hero-stamp.Stamp {
  pointer-events: all;

  .Stamp-inner {
    inset: 0 0 0 -10vw;

    @include mq(s) {
      inset: 0;
    }

    @include mq(m) {
      inset: 5vw 0 0 0;
    }
  }
}
