.grid {
  --grid-gap: #{rem($grid-gap)};
  display: grid;
  gap: var(--grid-gap);
  grid-template-columns: repeat(#{$grid-columns}, 1fr);
}

/* ======
 * Gap
 * ====== */

.grid {
  &.-gap\:l {
    --grid-gap: clamp(#{rem($grid-gap)}, #{$grid-gap-scale}, #{rem($grid-gap-l)});

    @include mq(l) {
      --grid-gap: #{rem($grid-gap-l)};
    }
  }

  &.-gap\:xl {
    --grid-gap: clamp(#{rem($grid-gap)}, #{$grid-gap-scale}, #{rem($grid-gap-xl)});

    @include mq(l) {
      --grid-gap: #{rem($grid-gap-xl)};
    }
  }

  &.-gap\:0 {
    gap: 0;
  }

  &.-gap\:row\:xl {
    row-gap: #{rem($grid-gap-xl)};
  }

  &.-gap\:row\:l {
    row-gap: #{rem($grid-gap-l)};
  }

  &.-gap\:row\:0 {
    row-gap: 0;
  }

  &.-gap\:column\:0 {
    column-gap: 0;
  }
}

/* ======
 * Align
 * ====== */

.grid {
  &.-place\:end {
    place-items: end;
  }
}

/* ======
 * Columns
 * ====== */

.grid-col {
  --grid-span: #{$grid-columns};
  grid-column: span var(--grid-span, #{$grid-columns}) / span var(--grid-span, #{$grid-columns});
}

@mixin gridColumns($breakpoint: null) {
  $breakpoint: if($breakpoint, \@#{$breakpoint}, null);

  @for $i from 1 through $grid-columns {
    .grid-col\:#{$i}#{$breakpoint} { --grid-span: #{$i}; }
    .grid-col.-start\:#{$i}#{$breakpoint} { grid-column-start: #{$i}; }
  }
}

.grid-col.-start { grid-column-start: 1; }
.grid-col.-end { grid-column-end: -1; }
.grid-col.-align\:end { align-self: end; }
.grid-col.-align\:center { align-self: center; }

@include gridColumns();
@include mq(s) { @include gridColumns(s); }
@include mq(m) { @include gridColumns(m); }
@include mq(l) { @include gridColumns(l); }
@include mq(xl) { @include gridColumns(xl); }
