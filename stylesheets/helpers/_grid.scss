/* =======================================
 * Grid
 * ======================================= */

.grid {
  display: grid;
  column-gap: var(--grid-gap, 0);
  grid-template-columns: repeat($grid-columns, 1fr);

  @include mq(xs) {
    --grid-gap: #{rem($grid-gap)};
  }

  > * {
    grid-column: span var(--span, #{$grid-columns}) / span var(--span, #{$grid-columns});
    --span: 12;
  }
}


/* ======
 * Sizing & Layout
 * ====== */

.grid {
  &.-auto {
    grid-template-columns: repeat(auto-fit, minmax(0, 1fr));

    > * { --span: span; }
  }

  &.-l {
    @include mq(m) {
      --grid-gap: #{rem($grid-gap * 2)};
    }
  }

  &.-full { --grid-gap: 0; }
}


/* ======
 * Columns
 * ====== */

@mixin gridColumns($breakpoint: null) {
  $breakpoint: if($breakpoint, \@#{$breakpoint}, null);

  @for $i from 1 through $grid-columns {
    .grid-col#{$i}#{$breakpoint} { --span: #{$i}; }
    .grid-col.-start#{$i}#{$breakpoint} { grid-column-start: #{$i}; }
    .grid-col.-end#{$i+1}#{$breakpoint} { grid-column-end: #{$i+1}; }
  }
}

.grid-col.-start { grid-column-start: 1; }
.grid-col.-end   { grid-column-end: -1; }

@include gridColumns();
@include mq(xs) { @include gridColumns(xs); }
@include mq(s) { @include gridColumns(s); }
@include mq(m) { @include gridColumns(m); }
@include mq(l) { @include gridColumns(l); }
